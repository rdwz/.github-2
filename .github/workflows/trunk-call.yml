---
name: '⭕ Trunk Call'
on:
  workflow_call:
#    outputs:
#      workflow:
#        description: "The first job output"
#        value: ${{ jobs.prepare.outputs.workflow }}
#      workflow_out_two:
#        description: "The second job output"
#        value: ${{ jobs.trunk.outputs.job_out_two }}
    secrets:
      trunk-token:
        description: >
          You can find a per-repo API token in the Trunk web app settings.
          This will cause results to be uploaded to the Trunk web app if this job is a scheduled job running on a branch, or if `check-mode` is set to 'all'.
        required: false
    inputs:
      username:
        description: 'A username passed from the caller workflow'
        default: 'z-shell'
        required: false
        type: string
# ===   TRUNK INPUT   === #
      trunk_path:
        description: >
          Path to Trunk Launcher.
          If not provided, we'll look for it the repo root, `.trunk/bin` and `tools/`.
          If it can't be found anywhere and is not provided explicitly, we'll download it on demand."
        required: false
        type: string
      cache:
        default: "true"
        description: >
          Cache trunk downloads and results between runs.
          Caching is only needed when using ephemeral CI runners.
        required: false
        type: string
      upload-series:
        description: >
          Upload series name, for when `trunk-token` is provided. If not provided, we'll use the branch name.
        required: false
        type: string
      check-mode:
        description: >
          Trunk check mode. Leave unset to autodetect just changes.
          Set to 'all' to check the entire repository.
          If `trunk-token` is set with 'all', 'all' will also upload results to the Trunk web app.
        default: 'all'
        required: false
        type: string  
      arguments:
        description: Extra arguments to pass to trunk
        required: false
        type: string        
# ===   TRUNK END   === #
      call_arguments:
        description: 'Pass commands to run from the caller workflow'
        default: 'echo FunnyBunnyWithSomeMoney'
        required: false
        type: string
      shell:
        description: 'Run in shell specified from the caller workflow'
        default: 'bash'
        required: false
        type: string
      working-directory:
        description: 'Run in shell specified from the caller workflow'
        default: '.'
        required: false
        type: string        
      enable_node:
        description: 'Enable Node Action'
        required: false
        type: string   
      node_version:
        description: 'Set Node versions'
        default: '16'
        required: false
        type: string
      RUN_NODE_ARGS:
        description: 'Pass arguments to Node'
        default: 'npm --version'
        required: false
        type: string

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
        with:
          submodules: recursive
        if: ${{ inputs.node_enable == true }}
      - uses: actions/setup-node@v3
        with:
          node-version: '${{ matrix.node_version }}'
      - name: "✨ Set matrix output"
        id: set-matrix
        run: |
          MATRIX="sudo apt update && sudo apt install -yq zsh && ${{ inputs.call_arguments }}"
          echo "MATRIX=${MATRIX}" >&2
          echo "::set-output name=matrix::${MATRIX}"

  trunk-check:
    runs-on: ubuntu-latest
    needs: build-matrix
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - run: echo "{{ steps.set-matrix.outputs.matrix }}"
      # ===   TRUNK RUN   === #
      - uses: trunk-io/trunk-action@29e16ed0984c534f2cce634fc991652e5ab572fd 
        with:
          trunk-path: ${{ inputs.trunk_path }}
          trunk-token: ${{ secrets.trunk-token }}
          check-mode: ${{ inputs.check-mode }}
          arguments: ${{ inputs.arguments }}

#          if: ${{ failure() }}
#          run: echo FunnyBunyFailed-NoMoney

#      - name: My backup step
#        if: ${{ failure() }}
#        uses: actions/WhereIsBunny@1.0.0
#  example_matrix:
#    strategy:
#      matrix:
#        os: [windows-latest, ubuntu-latest]
#        node: [12, 14, 16]
#        include:
#          - os: windows-latest
#            node: 16
#            npm: 6
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node }}
#      - if: ${{ matrix.npm }}
#        run: npm install -g npm@${{ matrix.npm }}
#      - run: npm --version
